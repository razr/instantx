#version: "3.8"

services:
  # ---------------------------------------------
  # Observability (Prometheus Service)
  prometheus:
    #image: prom/prometheus:2.54.1
    image: prom/prometheus:v3.2.1
    container_name: instantx_prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=7d"
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - default
      - nifi_network  
  # ---------------------------------------------
  # Observability (Grafana)
  grafana:
    image: grafana/grafana:7.5.4
    container_name: instantx_grafana
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./observability/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
  
  # ---------------------------------------------
  # Broker (MQTT) - HiveMQ CE
  mqtt:
    #image: hivemq/hivemq-ce:2024.6
    image: hivemq/hivemq-ce:2025.1
    container_name: instantx_mqtt
    environment:
      HIVEMQ_LOG_LEVEL: DEBUG
    ports:
      - 1883:1883
      - 9399:9399
      - 9010:9010
    volumes:
      - ./mqtt/extensions/hivemq-prometheus-extension/:/opt/hivemq/extensions/hivemq-prometheus-extension/
      - ./mqtt/extensions/hivemq-extension-poc/:/opt/hivemq/extensions/hivemq-extension-poc/
    restart: always
  
  # ---------------------------------------------
  # Apache Kafka
  kafka:
    image: apache/kafka:3.8.0
    container_name: instantx_kafka
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      #KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: broker,controller
      #KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181      
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1      
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      
      #KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://localhost:9093
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092,PLAINTEXT_HOST://localhost:29092,CONTROLLER://localhost:9093
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092,PLAINTEXT_HOST://localhost:29092
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      #test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server localhost:9092"]
      interval: 2s
      timeout: 60s
      retries: 15
  
  # ---------------------------------------------
  # TO DELETE!!!!
  kafka-ui2:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8980:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
      #KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      #KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://host.docker.internal:8081
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://host.docker.internal:8083
    depends_on:
      - kafka
  
  # ---------------------------------------------
  # Kafka Connect (Confluent)
  connect:
    image: confluentinc/cp-kafka-connect:7.4.5
    container_name: instantx_kafka-connect
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: kc_connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: kc_connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: kc_connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/etc/kafka-connect/jars,/usr/share/java/"
    command:
      - bash
      - -c
      - |
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep 100 &&
        curl -X POST -H "Content-Type: application/json" --data @/mqtt-sink-connector.json http://connect:8083/connectors &&
        curl -X POST -H "Content-Type: application/json" --data @/mqtt-source-connector.json http://connect:8083/connectors &&     
        sleep infinity
    volumes:
      - ./kafka-connect/connectors:/etc/kafka-connect/jars
      - ./kafka-connect/flows/mqtt-sink-connector.json:/mqtt-sink-connector.json      
      - ./kafka-connect/flows/mqtt-source-connector.json:/mqtt-source-connector.json
    depends_on:
      - kafka
  
  # ---------------------------------------------
  # TO DELETE!!!!
  kafka-connect-ui2:
    image: landoop/kafka-connect-ui:latest
    ports:
      - 8000:8000
    environment:
      CONNECT_URL: http://connect:8083
    depends_on:
      - connect
  
  # ---------------------------------------------
  # API Service (Example)
  api-service:
    build:
      context: ./eventPublisher
    container_name: instantx_api-service
    ports:
      - 5000:5000
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
      prometheus:
        condition: service_started
  
  # ---------------------------------------------
  # Apache Zookeeper
  zookeeper:
    hostname: zookeeper
    container_name: instantx_zookeeper
    image: zookeeper:3.7.0
    ports:
      - 2181:2181
    restart: on-failure
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - nifi_network
  
  # ---------------------------------------------
  # NiFi Registry (Upgraded to 1.18.0)
  nifiregistry:
    hostname: nifiregistry
    container_name: instantx_nifi_registry
    image: apache/nifi-registry:1.18.0
    restart: on-failure
    user: "0:0"
    ports:
      - 18080:18080
    environment:
      - LOG_LEVEL=INFO
      - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
      - NIFI_REGISTRY_FLOW_PROVIDER=file
      - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
    volumes:
      - nifi-registry-db:/opt/nifi-registry/nifi-registry-current/database
      - nifi-registry-flow:/opt/nifi-registry/nifi-registry-current/flow_storage
    networks:
      - nifi_network
  
  # ---------------------------------------------
  # Apache NiFi (Upgraded to 1.18.0)
  nifi:
    hostname: nifi
    container_name: instantx_nifi
    build:
      context: .
      dockerfile: ./nifi/Dockerfile.nifi
    #image: apache/nifi:1.18.0
    restart: on-failure
    ports:
      - 8090:8080
      - 9094:9094
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=30 sec
      - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
    healthcheck:
      test: "curl -f http://nifi:8080/nifi/ || exit 1"
      interval: 60s
      timeout: 3s
      start_period: 5s
      retries: 5
    volumes:
      - nifi-conf:/opt/nifi/nifi-current/conf
      - nifi-db-repo:/opt/nifi/nifi-current/database_repository
      - nifi-ff-repo:/opt/nifi/nifi-current/flowfile_repository
      - nifi-content-repo:/opt/nifi/nifi-current/content_repository
      - nifi-prov-repo:/opt/nifi/nifi-current/provenance_repository
      - nifi-state:/opt/nifi/nifi-current/state
      - nifi-logs:/opt/nifi/nifi-current/logs
      - ./nifi/asn:/var/lib/nifi/scripts/asn
      - ./nifi/custom-nars/nifi-amqpconsumer-nar-1.3.nar:/opt/nifi/nifi-current/lib/nifi-amqpconsumer-nar-1.3.nar
      - ./nifi/custom-nars/nifi-geohash-nar-1.3.5.nar:/opt/nifi/nifi-current/lib/nifi-geohash-nar-1.3.5.nar
      - ./nifi/nifi-scripts/encoder_decoder.py:/var/lib/nifi/scripts/encoder_decoder.py
      - ./nifi/transformations/transform_denm.xslt:/var/lib/nifi/xslt/transform_denm.xslt
    #$command: >
    #$  bash -c "
    #$  apt-get update &&
    #$  apt-get install -y python3 python3-pip &&
    #$  pip3 install xmltodict asn1tools &&
    #$  exec /opt/nifi/nifi-current/bin/nifi.sh run"
    #$command:
    #$  - bash
    #$  - -c
    #$  - |
    #$    apt-get update &&
    #$    apt-get install -y python3 python3-pip &&
    #$    pip3 install xmltodict asn1tools &&
    #$    exec /opt/nifi/nifi-current/bin/nifi.sh run
    networks:
      - nifi_network
  
  # ---------------------------------------------
  # NiFi Init Script for Prometheus Task & Flow Bootstrap
  nifi-setup:
    build:
      context: .
      dockerfile: ./nifi/Dockerfile.nifi-init
    container_name: instantx_setup
    depends_on:
      nifi:
        condition: service_healthy
    networks:
      - nifi_network
    restart: "no"
    environment:
      - NIFI_URL=http://nifi:8080
      - NIFI_REGISTRY_URL=http://nifiregistry:18080
    volumes:
      - ./nifi/flows/integrator-framework/v1/flow.json:/opt/nifi/flow.json
  
networks:
  nifi_network:
    driver: bridge

volumes:
  nifi-conf:
  nifi-db-repo:
  nifi-ff-repo:
  nifi-content-repo:
  nifi-prov-repo:
  nifi-state:
  nifi-logs:
  nifi-registry-db:
  nifi-registry-flow:

